#define HOST_OS 1
#include "zmk-helpers/key-labels/36.h"

#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // requires auto-layer module
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"

#define DEF 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUN 4
#define SYS 5

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 125

&num_word {
  continue-list = <BSPC DEL DOT COMMA MINUS>;
};

&sk {
  release-after-ms = <1500>;
  quick-release;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
  flavor = "balanced";
  tapping-term-ms = <150>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

MAKE_HRM(hmll, &mo, &kp, KEYS_R THUMBS) // Left-hand layer HRMs.
MAKE_HRM(hmrl, &mo, &kp, KEYS_L THUMBS) // Right-hand layer HRMs.

/* Tap: num-word | double-tap: sticky num-layer | Hold: num-layer. */
/* #define SMART_NUM &smart_num NUM 0 */
/* ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced"; */
/*              tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;) */
/* ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>; */
/*               tapping-term-ms = <200>;) */

/* Tap: num-word | double-tap: caps-word | Hold: num-layer. */
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&caps_word>;
              tapping-term-ms = <200>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

SIMPLE_MORPH(semiexcl, SFT, &kp SEMI, &kp EXCL)

#include "combos.dtsi"

ZMK_LAYER(base,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp F         &kp P         &kp D         &kp L         &kp X           &semiexcl       &kp U         &kp O         &kp Y         &kp B
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &hml LGUI S   &hml LALT N  &hml LCTRL T  &hml LSHIFT H     &kp K           &kp COMMA   &hmr LSHIFT A &hmr RCTRL E   &hmr LALT I   &hmr RGUI C
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp V         &kp W         &kp G         &kp M         &kp J           &kp MINUS      &kp DOT       &kp APOS     &kp EQUAL     &kp SLASH
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                &mt LGUI TAB    &lt NAV R     &kp RET           SMART_NUM   &lt NUM SPACE    &kp BSPC
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(nav,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         XXX           XXX          XXX            XXX           XXX             &kp HOME     &kp PGDN      &kp PGUP      &kp END          XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &sk LGUI      &sk LALT     &sk LCTRL     &sk LSHIFT        XXX             &kp LEFT     &kp DOWN      &kp UP       &kp RIGHT         XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX           XXX           XXX           XXX           XXX               XXX        &kp DOT          XXX           XXX           XXX
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     XXX           XXX           XXX               ___        &mo FUN          ___
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

/* ZMK_LAYER(nav, */
/* // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ */
/*          XXX         &kp N4        &kp N5        &kp N6          XXX             &kp HOME     &kp PGDN      &kp PGUP      &kp END          XXX */
/* // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ */
/*       &hml N0        &kp N1        &kp N2        &kp N3          XXX             &kp LEFT     &kp DOWN      &kp UP        &kp RIGHT        XXX */
/* // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ */
/*          XXX         &kp N7        &kp N8        &kp N9          XXX             &kp MINUS    &kp DOT       &kp ASTRK     &kp PLUS     &kp SLASH */
/* // ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯ */
/*                                      ___           ___           ___               ___           ___          ___ */
/* //                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯ */
/* ) */

ZMK_LAYER(num,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         XXX         &kp N4        &kp N5        &kp N6          XXX               XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp N0        &kp N1        &kp N2        &kp N3          XXX               XXX        &kp DOWN      &kp UP          XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX         &kp N7        &kp N8        &kp N9          XXX             &kp MINUS    &kp DOT       &kp ASTRK     &kp PLUS     &kp SLASH
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     XXX        &mo FUN          XXX               XXX           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sym,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp TILDE     &kp RPAR      &kp RBRC      &kp RBKT         XXX             &kp EXCL    &kp BSLH     &kp PERCENT   &kp CARET      &kp GRAVE
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp PIPE      &kp LPAR      &kp LBRC      &kp LBKT         XXX             &kp LT       &kp ASTRK     &kp HASH     &kp AMPS      &kp DOLLAR
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX           XXX           XXX           XXX           XXX            &kp UNDER      &kp GT       &kp DQT       &kp PLUS      &kp QMARK
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     XXX        &mo FUN          XXX               XXX           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(fun,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp LG(ESC)     &kp F4        &kp F5        &kp F6          XXX               XXX           XXX           XXX           XXX       &kp PSCRN
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp F10       &kp F1        &kp F2        &kp F3          XXX           &kp C_PREV   &kp C_VOL_DN  &kp C_VOL_UP   &kp C_NEXT        XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp F11       &kp F7        &kp F8        &kp F9       &kp F12              XXX      &kp  C_MUTE     &kp C_PP         XXX           XXX
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     XXX           XXX           XXX               XXX           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(sys,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         XXX      &bt BT_SEL 0  &bt BT_SEL 1       XXX       &bt BT_CLR            XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX          XXX           XXX            XXX       &bootloader       &bootloader       XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX          XXX           XXX            XXX       &sys_reset        &sys_reset        XXX           XXX           XXX           XXX
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     XXX           XXX           XXX               XXX           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)
